import React, { Component } from 'react';
import R_background from './R_background';
import R_mouth from './R_mouth';
import R_eyes from './R_eyes';
import R_head from './R_head';
import R_legs from './R_legs';
import R_hands from './R_hands';
import R_body from './R_body';
import router from 'next/router';

import { GetBackgroundOptionsLength, GetBodyOptionsLength, GetBottomsOptionsLength, GetEyeBrowsOptionsLength, GetEyesOptionsLength, GetFaceOptionsLength, GetHairOptionsLength, GetHeadOptionsLength, GetMiddleOptionsLength, GetMouthOptionsLength, GetNoseOptionsLength, SetActiveAvatarType } from '../AvatarGlobalProps';
import { getAvatarData, getLockedAssets, saveAvatarData } from '../../../src/utils/apis';
import { connect } from 'react-redux';
import { Tab, TabList, TabPanel, Tabs } from 'react-tabs';
import AvatarSkinColorBtn from '../AvatarSkinColorBtn';
import ScreenshotRobotAvatar from './ScreenshotRobotAvatar';

class RobotAvatar extends Component {
    constructor(props) {
        super(props);
        this.state = {
            isLoading: false,
            tabBarRoutes: [
                { title: 'Skin' },
                { title: 'Eyes' },
                { title: 'Mouth' },
                { title: 'Nose' },
                { title: 'Hair' },
                { title: 'Eye Brows' },
                { title: 'Pants' },
                { title: 'Shirts' },
                { title: 'Face' },
                { title: 'Hats' },
                { title: 'Dress' },
                { title: 'Background' },
            ],
            skinColors: [
                '#949494',
                '#ffd216',
                '#59ecfc',
                '#bfef2b',
                '#ff7c24',
                '#ef2240',
                '#eda1ff',
                '#ff66ac',
            ],
            bodyPartsSkinColor: [
                '#5b5b5b',
                '#cfa500',
                '#00c2e2',
                '#9dce02',
                '#b9580e',
                '#c60521',
                '#c74ce5',
                '#dd1f64',
            ],
            headSkinColor: [
                '#e5e5e5',
                '#fff294',
                '#c0fcff',
                '#e6ff99',
                '#ffaa71',
                '#ff7b8e',
                '#fecfff',
                '#ffb3df',
            ],
            innerEarSkinColors: [
                '#efaa7b',
                '#ea9671',
                '#d17154',
                '#99402b',
                '#490b07'
            ],
            eyeColors: [
                '#30120d',
                '#b55230',
                '#5b290d',
                '#94b74f',
                '#7ccbf7'
            ],
            hairColors: [
                '#30120d',
                '#ffdba1',
                '#ce5119',
                '#9e532e',
                '#823e29',
                '#422019'
            ],
            sectionPropsBtns: [
                {
                    title: 'Body',
                    icon: 'icon'
                },
                {
                    title: 'Eyes',
                    icon: 'icon'
                },
                {
                    title: 'Mouth',
                    icon: 'icon'
                },
                {
                    title: 'Nose',
                    icon: 'icon'
                },
                {
                    title: 'Body',
                    icon: 'icon'
                },
                {
                    title: 'Eyes',
                    icon: 'icon'
                },
                {
                    title: 'Mouth',
                    icon: 'icon'
                },
                {
                    title: 'Nose',
                    icon: 'icon'
                },
            ],
            selectedSkinColorIndex: 0,
            selectedEyeIndex: 0,
            selectedNoseIndex: 0,
            selectedMouthIndex: 0,
            selectedHairIndex: 0,
            selectedEyeBrowsIndex: 0,
            FrontFaceAccessoryActive: true,
            backHairActive: false,
            activeGender: 'f',
            selectedEyeColor: 0,
            selectedHairColor: 0,
            selectedEyeBrowsColor: 0,
            selectedBottomIndex: 0,
            selectedShirtIndex: 0,
            selectedFaceAccessoryIndex: 0,
            selectedHeadAccessoryIndex: 0,
            selectedBodyIndex: 0,
            selectedBackgroundIndex: 0,
            loadingAvatar: true,
            saving: false,
            tabIndex: 0,
            tabIcons: [],
            hairMaleItems: [],
            hairFemaleItems: [],
            bodyMaleItems: [],
            bodyFemaleItems: [],
            eyeItems: [],
            mouthItems: [],
            noseItems: [],
            eyeBrowsItems: [],
            faceItems: [],
            headItems: [],
            pantsItems: [],
            shirtItems: [],
            backgroundItems: []
        };
    }
    componentDidMount() {
        clearInterval(this.generateInterval);
        // let lockedAssets = await getLockedAssets(this.props.loggedInUser.userData._id, this.props.loggedInUser.userData.gender, 'robot')
        // this.setState({
        //     lockedDresses: lockedAssets.lockItembody.items,
        //     lockedEyes: lockedAssets.lockItemeyes.items,
        //     lockedEyeBrows: lockedAssets.lockItemeyebrows.items,
        //     lockedFaceAcc: lockedAssets.lockItemglasses.items,
        //     lockedHair: lockedAssets.lockItemhair.items,
        //     lockedHeadAcc: lockedAssets.lockItemhat.items,
        //     lockedMouth: lockedAssets.lockItemmouth.items,
        //     lockedTops: lockedAssets.lockItempant.items,
        //     lockedBottoms: lockedAssets.lockItemtshirt.items
        // })
        this.getActiveGender();
        this.loadSavedAvatar();
        SetActiveAvatarType('robot');
        this.InitAvatarTabs();
    }
    InitAvatarTabs = () => {
        let tabIcons = [];
        for (let x = 0; x < 6; x++) {
            tabIcons.push(x)
        }

        let hairArr = [];
        for (let x = 0; x < GetHairOptionsLength(); x++) {
            hairArr.push(x);
        }
        let bodyArr = [];
        for (let x = 0; x < GetBodyOptionsLength(); x++) {
            bodyArr.push(x);
        }
        let eyeArr = [];
        for (let x = 0; x < GetEyesOptionsLength(); x++) {
            eyeArr.push(x);
        }

        let mouthArr = [];

        for (let x = 0; x < GetMouthOptionsLength(); x++) {
            mouthArr.push(x);
        }

        let noseArr = [];

        for (let x = 0; x < GetNoseOptionsLength(); x++) {
            noseArr.push(x);
        }
        let eyeBrowsArr = [];

        for (let x = 0; x < GetEyeBrowsOptionsLength(); x++) {
            eyeBrowsArr.push(x);
        }

        let faceArr = [];

        for (let x = 0; x < GetFaceOptionsLength(); x++) {
            faceArr.push(x);
        }

        let headArr = [];

        for (let x = 0; x < GetHeadOptionsLength(); x++) {
            headArr.push(x);
        }

        let pantArr = [];

        for (let x = 0; x < GetBottomsOptionsLength(); x++) {
            pantArr.push(x);
        }

        let shirtArr = [];

        for (let x = 0; x < GetMiddleOptionsLength(); x++) {
            shirtArr.push(x);
        }


        let backgroundArr = [];

        for (let x = 0; x < GetBackgroundOptionsLength(); x++) {
            backgroundArr.push(x);
        }


        this.setState({
            hairMaleItems: hairArr,
            hairFemaleItems: hairArr,

            bodyMaleItems: bodyArr,
            bodyFemaleItems: bodyArr,

            eyeItems: eyeArr,

            mouthItems: mouthArr,
            noseItems: noseArr,
            eyeBrowsItems: eyeBrowsArr,
            faceItems: faceArr,
            headItems: headArr,
            pantsItems: pantArr,
            shirtItems: shirtArr,
            backgroundItems: backgroundArr,
            tabIcons: tabIcons
        });
    }
    componentWillUnmount() {
        clearInterval(this.generateInterval);
    }
    getActiveGender = () => {

        this.setState({

            activeGender: this.props.loggedInUser.userData.gender
        }, () => {

            if (this.state.activeGender == 'm' && this.state.selectedBottomIndex >= 10) {
                this.setState({
                    selectedBottomIndex: 0
                });
            }
        });
    }
    loadSavedAvatar = async () => {

        let avatarData = await getAvatarData(this.props.loggedInUser.userData._id)

        if (avatarData.avatarType == 'robot') {
            this.setState({
                ...avatarData
            })
        }
        this.setState({
            loadingAvatar: false
        })
    }
    uploadAvatar = async (fullScreenShot, headScreenShot) => {

        if (this.state.saving == false) {


            let avatar = {
                selectedSkinColorIndex: this.state.selectedSkinColorIndex,
                selectedEyeIndex: this.state.selectedEyeIndex,
                selectedNoseIndex: this.state.selectedNoseIndex,
                selectedMouthIndex: this.state.selectedMouthIndex,
                selectedHairIndex: this.state.selectedHairIndex,
                selectedEyeBrowsIndex: this.state.selectedEyeBrowsIndex,
                FrontFaceAccessoryActive: this.state.FrontFaceAccessoryActive,
                backHairActive: this.state.backHairActive,
                selectedEyeColor: this.state.selectedEyeColor,
                selectedHairColor: this.state.selectedHairColor,
                selectedEyeBrowsColor: this.state.selectedEyeBrowsColor,
                selectedBottomIndex: this.state.selectedBottomIndex,
                selectedShirtIndex: this.state.selectedShirtIndex,
                selectedFaceAccessoryIndex: this.state.selectedFaceAccessoryIndex,
                selectedHeadAccessoryIndex: this.state.selectedHeadAccessoryIndex,
                selectedBodyIndex: this.state.selectedBodyIndex,
                selectedBackgroundIndex: this.state.selectedBackgroundIndex,
                avatarType: 'robot'
            }
            this.setState({
                saving: true
            })
            let saveAvatar = await saveAvatarData(fullScreenShot, headScreenShot, avatar, this.props.loggedInUser.userData._id)
            this.setState({
                saving: false
            })
            // POP to Root once avatar is saved
        }
    }
    handleSelect = (index) => {

        this.setState({
            tabIndex: index
        });
    }
    renderTabIcon = (index) => {
        switch (index) {
            case 0: // body
                return (
                    <Tab>
                        <svg width="24" height="26" viewBox="0 0 24 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M23.5611 2.1574C23.5611 0.965921 22.59 0 21.3921 0H2.16905C0.971135 0 0 0.965921 0 2.1574C0 2.1574 0.0575086 2.63011 0.157335 3.43307C0.217013 3.9047 0.290798 4.48964 0.377603 5.16201C1.15451 11.1831 2.78428 26 3.70442 26H19.4346C20.3548 26 22.3567 11.1842 23.1662 5.16201C23.2573 4.48856 23.3344 3.9047 23.3962 3.43307C23.5015 2.63011 23.5611 2.1574 23.5611 2.1574ZM2.36111 3.49242C1.67968 3.49242 1.1263 2.94309 1.1263 2.26425C1.1263 1.58648 1.6786 1.03607 2.36111 1.03607C3.04253 1.03607 3.59591 1.58541 3.59591 2.26425C3.59591 2.94309 3.04253 3.49242 2.36111 3.49242ZM4.04622 10.46C4.04622 6.21103 7.50867 2.76717 11.7806 2.76717C16.0514 2.76717 19.5149 6.21103 19.5149 10.46C19.5149 14.709 16.0514 18.1528 11.7806 18.1528C7.50975 18.1539 4.04622 14.709 4.04622 10.46ZM20.0238 2.26425C20.0238 1.58648 20.5761 1.03607 21.2586 1.03607C21.9401 1.03607 22.4934 1.58541 22.4934 2.26425C22.4934 2.94201 21.9401 3.49242 21.2586 3.49242C20.5761 3.49242 20.0238 2.94309 20.0238 2.26425Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M2.36103 1.03906C1.6796 1.03906 1.12622 1.5884 1.12622 2.26724C1.12622 2.945 1.67852 3.49542 2.36103 3.49542C3.04245 3.49542 3.59583 2.94608 3.59583 2.26724C3.59583 1.5884 3.04245 1.03906 2.36103 1.03906Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M21.2576 3.49151C21.9391 3.49151 22.4924 2.94218 22.4924 2.26333C22.4924 1.58557 21.9391 1.03516 21.2576 1.03516C20.5762 1.03516 20.0228 1.58449 20.0228 2.26333C20.0239 2.94218 20.5762 3.49151 21.2576 3.49151Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M5.16816 22.6445C4.48673 22.6445 3.93335 23.1949 3.93335 23.8727C3.93335 24.5505 4.48565 25.1009 5.16816 25.1009C5.85066 25.1009 6.40296 24.5516 6.40296 23.8727C6.40296 23.1949 5.84958 22.6445 5.16816 22.6445Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M18.1369 22.6445C17.4544 22.6445 16.9021 23.1949 16.9021 23.8727C16.9021 24.5505 17.4544 25.1009 18.1369 25.1009C18.8183 25.1009 19.3717 24.5516 19.3717 23.8727C19.3706 23.1949 18.8183 22.6445 18.1369 22.6445Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M19.4506 11.4413C19.9952 7.22751 17.0023 3.37241 12.7658 2.83071C8.52922 2.28901 4.65331 5.26583 4.10869 9.47963C3.56406 13.6934 6.55695 17.5485 10.7935 18.0902C15.03 18.6319 18.9059 15.6551 19.4506 11.4413Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                        </svg>
                    </Tab>
                )

            case 1: //eyes  fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"}
                return (
                    <Tab>
                        <svg width="15" height="19" viewBox="0 0 15 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10.6017 4.90625L1.28354 6.94311C0.476745 8.08428 0 9.47426 0 10.9737C0 14.8517 3.16052 17.9966 7.05782 17.9966C10.9585 17.9966 14.1156 14.8517 14.1156 10.9737C14.119 8.38284 12.7021 6.1204 10.6017 4.90625ZM7.05782 14.4868C5.1075 14.4868 3.52725 12.9144 3.52725 10.9737C3.52725 10.3169 3.71061 9.70647 4.02733 9.17901C4.45406 9.82258 5.18752 10.2505 6.02099 10.2505C7.33787 10.2505 8.40805 9.18565 8.40805 7.87529C8.40805 7.82221 8.39471 7.77577 8.39138 7.72269C9.67825 8.24683 10.5884 9.50411 10.5884 10.9737C10.5884 12.9144 9.00814 14.4868 7.05782 14.4868Z" fill="white" />
                            <path d="M8.58797 7.61719C8.59287 7.69358 8.61248 7.76998 8.61248 7.85146C8.61248 9.86829 7.03861 11.498 5.10191 11.498C3.87616 11.498 2.80239 10.8461 2.1699 9.85301C1.70902 10.6577 1.43445 11.5999 1.43445 12.6083C1.43445 15.5877 3.75848 18.0018 6.62676 18.0018C9.49503 18.0018 11.8191 15.5877 11.8191 12.6083C11.8142 10.347 10.4805 8.42188 8.58797 7.61719Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M8.78204 3.28654L9.74362 3.06422C10.2722 2.94195 10.5587 2.1616 10.3825 1.31901C10.2064 0.476417 9.63324 -0.106062 9.10256 0.0162142L1.43327 1.78144C0.902596 1.90371 0.618155 2.68405 0.794338 3.52665C0.972645 4.36924 1.54365 4.95394 2.07432 4.82944L2.85123 4.65159L8.78204 3.28654Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                        </svg>

                    </Tab>
                )

            case 2: // mouth fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"}
                return (
                    <Tab>
                        <svg width="29" height="12" viewBox="0 0 29 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M27.2051 5.88334C27.2051 8.43348 24.4952 10.5011 21.1503 10.5011H7.21049C3.86951 10.5011 1.15967 8.43348 1.15967 5.88334C1.15967 3.3332 3.86951 1.26562 7.21049 1.26562H21.1503C24.4952 1.26562 27.2051 3.3332 27.2051 5.88334Z" fill="white" />
                            <path d="M1.04529 6.1666V5.58203L27.2524 5.68796L27.2485 6.26861L1.04529 6.1666Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M4.52798 1.55469H3.94031V10.4566H4.52798V1.55469Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M9.51023 1.55859H8.92249V10.4606H9.51023V1.55859Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M14.4878 1.57812H13.9V10.4801H14.4878V1.57812Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M19.4659 1.59375H18.8782V10.4957H19.4659V1.59375Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M24.4438 1.61328H23.8561V10.5152H24.4438V1.61328Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M6.87916 11.3827C3.18714 11.3788 0.0355003 9.10328 0 5.99995C0.0355003 2.90055 3.18714 0.625034 6.87916 0.617188H21.3672C25.0592 0.621111 28.2109 2.89662 28.2424 5.99995C28.2069 9.10328 25.0553 11.3749 21.3672 11.3827H6.87916ZM2.7848 3.07317C1.75923 3.86175 1.1715 4.88966 1.1715 6.00387C1.1715 7.11417 1.75923 8.14599 2.7848 8.93458C3.81036 9.71531 5.26193 10.2214 6.87916 10.2175H21.3672C22.9844 10.2175 24.436 9.71531 25.4576 8.93458C26.4832 8.14599 27.0709 7.11417 27.0709 6.00387C27.0709 4.89358 26.4832 3.86175 25.4576 3.07317C24.436 2.29243 22.9805 1.78633 21.3672 1.78633H6.87916C6.87522 1.78633 6.87522 1.78633 6.87522 1.78633C5.25798 1.78633 3.81036 2.28851 2.7848 3.07317Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                        </svg>

                    </Tab>
                )

            case 3: // head 
                return (
                    <Tab>
                        <svg width="33" height="34" viewBox="0 0 33 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M13.3175 28.196C13.3175 28.6934 13.8444 29.0973 14.4947 29.0973H17.7681C18.4184 29.0973 18.9453 28.6947 18.9453 28.196C18.9453 27.882 18.7341 27.6061 18.4159 27.4453H13.8482C13.5288 27.6048 13.3175 27.882 13.3175 28.196Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M13.3175 29.9989C13.3175 29.5015 13.8444 29.0977 14.4947 29.0977H17.7681C18.4184 29.0977 18.9453 29.5002 18.9453 29.9989C18.9453 30.3129 18.7341 30.5888 18.4159 30.7496H13.8482C13.5288 30.5888 13.3175 30.3129 13.3175 29.9989Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M13.3175 31.4499C13.3175 31.9474 13.8444 32.3512 14.4947 32.3512H17.7681C18.4184 32.3512 18.9453 31.9486 18.9453 31.4499C18.9453 31.1359 18.7341 30.86 18.4159 30.6992H13.8482C13.5288 30.8587 13.3175 31.1359 13.3175 31.4499Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M13.3175 33.249C13.3175 32.7515 13.8444 32.3477 14.4947 32.3477H17.7681C18.4184 32.3477 18.9453 32.7502 18.9453 33.249C18.9453 33.5629 18.7341 33.8388 18.4159 33.9996H13.8482C13.5288 33.8388 13.3175 33.5629 13.3175 33.249Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M16.0766 7.01662C16.629 7.2508 17.2921 7.27232 17.8902 7.06599C18.7747 6.75965 19.2711 5.64063 18.1053 5.27733C17.1419 4.97605 16.3324 5.58746 15.8985 6.40141C15.6757 6.20773 15.4937 5.9533 15.3741 5.64949C14.8892 4.42034 15.985 3.56589 17.1762 3.24183C17.6395 4.32287 19.0471 5.10137 19.9762 4.04945C20.8734 3.03296 18.174 2.59497 17.6688 2.65447C17.6039 2.66206 17.5377 2.67472 17.4715 2.68612C17.4715 2.36079 17.5822 2.0266 17.8075 1.73799C18.5075 0.840494 19.5345 1.12278 20.4636 1.43292C20.4776 1.40254 20.4891 1.37215 20.5043 1.34177L20.652 1.05189C19.9316 0.808848 19.2558 0.584791 18.4553 0.815177C17.7668 1.01392 17.035 1.75191 17.021 2.5013C17.0197 2.59751 17.0273 2.69498 17.0426 2.79118C15.8361 3.16208 14.7238 4.1659 14.8981 5.48999C14.977 6.08874 15.2888 6.53306 15.7126 6.82041C15.6312 7.0508 15.5803 7.28751 15.5625 7.51663C15.5357 7.86601 15.6083 8.16728 15.7495 8.42172H16.3146C15.9405 8.02044 15.9137 7.50144 16.0766 7.01662ZM18.9135 3.18866C19.0789 3.24309 19.2367 3.31398 19.3869 3.40259C19.3984 3.59374 19.4111 3.78615 19.4225 3.97729C19.0089 4.15451 18.6207 4.13299 18.258 3.914C17.9029 3.74311 17.6688 3.46968 17.553 3.15702C18.0544 3.06714 18.5444 3.07347 18.9135 3.18866ZM16.9306 5.8381C17.2704 5.58873 18.3178 5.43176 18.4006 6.08368C18.4426 6.41407 17.8368 6.63686 17.6204 6.71155C17.1292 6.88117 16.6468 6.8394 16.2459 6.63559C16.4228 6.31533 16.6684 6.03051 16.9306 5.8381Z" fill="black" />
                            <path d="M20.4623 1.43316C20.0818 2.29521 20.4381 3.31169 21.2921 3.74335C22.1766 4.18893 23.2572 3.83829 23.7064 2.95852L23.8922 2.59395C24.3402 1.71418 23.9877 0.639463 23.1032 0.19388C22.2186 -0.252968 21.1381 0.098941 20.6889 0.978713L20.6507 1.05213L20.5031 1.34201C20.4878 1.37239 20.4763 1.40278 20.4623 1.43316Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M28.3136 13.1094C27.4062 13.1094 26.8767 14.9044 26.7266 16.9968V19.5387C26.8767 21.6311 27.4062 23.4261 28.3136 23.4261C30.4899 23.4261 32.2551 21.1172 32.2551 18.269C32.2551 15.4183 30.4912 13.1094 28.3136 13.1094Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M5.56422 17.6867C5.48913 15.3145 4.94824 13.1094 3.94153 13.1094C1.76523 13.1094 0 15.4183 0 18.2665C0 21.1147 1.76395 23.4236 3.94153 23.4236C4.94824 23.4236 5.48913 21.2172 5.56422 18.8462C5.57567 18.4614 5.57567 18.0715 5.56422 17.6867Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M25.0275 8.41474C25.0033 8.4122 24.4217 8.41727 23.7561 8.42233H16.3159H15.7508H7.43507C6.40164 8.42233 5.56421 9.25527 5.56421 10.2831V17.6846C5.57694 18.0694 5.57694 18.4593 5.56421 18.8441V25.5823C5.56421 26.6102 6.40164 27.4431 7.43507 27.4431H13.8482H18.4159H24.8315C25.1637 27.4431 25.4755 27.3558 25.7466 27.2039C26.3307 26.8887 26.7278 26.2747 26.7278 25.5671V19.5353V16.9935V10.2667C26.7265 9.29704 25.9807 8.49955 25.0275 8.41474Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                        </svg>

                    </Tab>
                )
            case 4: // legs
                return (
                    <Tab>
                        <svg width="28" height="25" viewBox="0 0 28 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M6.59032 18.1371C6.73519 17.7503 6.94563 17.3423 7.03407 17.0314C8.30433 16.1608 8.90973 14.5667 8.38516 13.0575C8.33484 12.9135 8.26469 12.7724 8.18234 12.6329C8.36686 12.4463 8.53307 12.234 8.66421 11.9913C9.16439 11.0797 9.11254 9.89971 8.69166 8.9017C9.68591 8.23889 10.3904 7.20903 10.212 5.94862C10.151 5.51787 9.97107 5.13869 9.71488 4.80349C11.069 3.96019 11.8787 2.51778 10.4285 1.23007C9.45107 0.362499 8.13049 0.00151673 6.84651 0C6.51713 0 6.51865 0.506588 6.84651 0.506588C8.10914 0.508105 11.159 1.25585 10.6954 3.0638C10.546 3.64774 10.026 4.10579 9.4038 4.45009C8.50105 3.5628 7.0417 3.05318 5.97426 2.82567C4.765 2.56783 2.48829 2.57845 2.00336 4.05726C1.63586 5.17964 4.00406 5.50726 4.60488 5.59978C6.23349 5.85155 7.67911 5.79392 9.18726 5.09015C9.20708 5.08105 9.22539 5.07195 9.24369 5.06285C10.3355 6.29596 9.61424 7.54574 8.41108 8.36175C8.14574 7.92796 7.80721 7.55333 7.40768 7.29093C6.29906 6.56442 3.70365 6.08361 3.56946 8.10542C3.43832 10.0772 6.22282 9.88758 7.45343 9.49626C7.72334 9.40981 7.98868 9.29909 8.24182 9.16713C8.46445 9.77382 8.51935 10.4594 8.41718 11.1252C8.35008 11.5605 8.16099 11.9261 7.8926 12.2188C7.00662 11.1313 5.31244 10.3214 4.07878 10.4503C3.49321 10.511 3.00371 11.1161 3.00829 11.697C3.01439 12.513 3.58165 12.9726 4.28922 13.282C5.41613 13.7765 6.78246 13.6673 7.76146 12.9847C7.87583 13.191 7.96885 13.4185 8.03138 13.6673C8.29976 14.726 7.79958 15.7103 7.01425 16.3762C6.85261 15.8514 6.36006 15.5465 5.81414 15.3023C4.89308 14.8928 3.91866 15.3797 3.91714 16.4201C3.91561 17.7367 5.41309 17.7776 6.31279 17.4166C6.34024 17.406 6.36617 17.3909 6.39361 17.3802C6.30212 17.629 6.18317 17.8853 6.08863 18.1401C6.19842 18.1356 6.30822 18.1325 6.41953 18.1341C6.48053 18.1341 6.53543 18.1356 6.59032 18.1371ZM2.58436 4.40156C2.16958 4.02237 3.24313 3.49455 3.47644 3.399C3.98576 3.1912 4.56371 3.19424 5.10353 3.21851C6.43936 3.28069 7.83924 3.84188 8.86093 4.69125C8.86856 4.69732 8.87313 4.70339 8.88076 4.70794C8.31806 4.9491 7.73554 5.11139 7.29484 5.19784C6.04135 5.44507 3.56488 5.29795 2.58436 4.40156ZM5.68909 9.27482C5.41156 9.27482 5.14317 9.21263 4.87936 9.1368C3.75092 8.81222 4.01016 7.95981 4.55151 7.36222C5.04711 6.8162 6.15572 7.24695 6.69554 7.48052C7.26891 7.72927 7.69589 8.13424 7.98715 8.62111C7.24451 9.02911 6.39513 9.27633 5.68909 9.27482ZM5.35209 13.056C4.80464 12.9802 4.26024 12.7739 3.83174 12.4251C3.29802 11.9928 3.47186 11.0191 4.30295 10.9326C4.73602 10.8871 5.25449 11.1222 5.63572 11.2875C6.35701 11.6015 7.0234 11.9974 7.48698 12.5722C6.88616 12.9878 6.0871 13.1577 5.35209 13.056ZM5.75009 17.0845C5.01966 17.3165 4.13673 16.8357 4.51186 16.003C4.68265 15.6254 5.10353 15.6223 5.44816 15.7058C6.05965 15.8529 6.4546 16.2321 6.50188 16.7447C6.26094 16.8873 6.0078 17.0026 5.75009 17.0845Z" fill="black" />
                            <path d="M6.59033 18.1374C6.53544 18.1358 6.48206 18.1343 6.42717 18.1328C6.31585 18.1328 6.20606 18.1343 6.09626 18.1389C3.06777 18.2617 0.656862 20.2396 0.647712 22.6694C0.637038 25.1887 12.1593 25.2357 12.17 22.7164C12.1776 20.2441 9.69507 18.2208 6.59033 18.1374Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            <path d="M22.2208 18.1425C22.1354 17.9014 22.0287 17.6678 21.9295 17.4312C22.5044 17.689 23.1281 17.7618 23.7183 17.4994C24.5082 17.1491 24.5936 15.8993 23.9318 15.3957C23.18 14.8239 21.53 15.3957 21.2616 16.3361C20.9094 16.0039 20.6273 15.6505 20.4961 15.4124C20.0478 14.5903 20.1378 13.7106 20.5464 12.9796C20.7965 13.16 21.0832 13.3102 21.4095 13.4224C22.4846 13.791 25.2752 13.521 25.2859 11.9103C25.3011 9.74133 22.9436 10.5422 21.771 11.1746C21.251 11.4537 20.7904 11.8299 20.4321 12.2697C19.7215 11.5311 19.6696 10.2115 20.0188 9.17407C20.9932 9.69279 22.1735 9.92637 23.1342 9.73071C23.7335 9.60937 24.8071 9.25446 24.9626 8.54766C25.1288 7.7984 24.5158 7.0643 23.7991 6.83982C22.968 6.57894 22.0287 6.74882 21.2571 7.12648C20.5525 7.4723 20.1347 7.86968 19.8343 8.44301C18.834 7.77868 18.2423 6.67146 18.7836 5.48841C18.8477 5.34736 18.9285 5.21388 19.023 5.08799C19.7306 5.44139 20.5129 5.65677 21.1793 5.72654C22.5868 5.87366 24.2917 5.67042 25.5863 5.09406C26.8474 4.53135 26.1399 3.48936 25.2249 3.01917C23.578 2.17283 20.5083 2.91148 18.9697 4.42973C18.8523 4.363 18.7348 4.29323 18.6189 4.21739C15.7963 2.38214 19.543 0.513529 21.4523 0.510496C21.7801 0.510496 21.7816 0.00390625 21.4523 0.00390625C20.0585 0.00542298 16.5313 0.941247 17.059 2.99339C17.2602 3.77754 17.8611 4.3994 18.6022 4.8529C17.9632 5.70075 17.797 6.73517 18.5061 7.84845C18.773 8.26858 19.1633 8.63563 19.6208 8.93746C19.5857 9.0315 19.5522 9.13009 19.5186 9.23322C19.1145 10.5103 19.3341 11.7935 20.1652 12.6459C19.6635 13.4543 19.5095 14.4311 19.9563 15.4351C20.2171 16.0221 20.7188 16.6409 21.3272 17.0793C21.4355 17.3978 21.6017 17.78 21.7161 18.138C21.7694 18.1364 21.8228 18.1349 21.8762 18.1334C21.9921 18.1349 22.1064 18.1364 22.2208 18.1425ZM21.9189 3.44234C23.0122 3.12383 24.3435 3.03131 25.3362 3.66985C26.5394 4.44187 24.8162 4.86655 24.1742 5.00609C22.5136 5.36556 20.9185 5.35039 19.4256 4.66179C20.121 4.04903 21.1259 3.67288 21.9189 3.44234ZM20.5129 8.23976C20.9231 7.73014 21.6612 7.47837 22.2681 7.31001C22.6569 7.20232 23.0504 7.19322 23.4453 7.25844C24.2383 7.39191 24.647 8.46727 23.9165 8.92381C22.814 9.61241 21.3104 9.23171 20.2323 8.67355C20.3147 8.51429 20.4092 8.36717 20.5129 8.23976ZM21.7176 11.7859C22.1552 11.525 22.6142 11.299 23.09 11.1155C23.3843 11.0017 23.6817 10.9471 23.9989 10.9335C25.3332 10.8774 24.6698 12.3183 24.1681 12.6444C23.1876 13.2799 21.7816 13.2116 20.8179 12.5807C21.0619 12.2667 21.3684 11.9952 21.7176 11.7859ZM23.1037 15.6566C23.8769 15.555 24.0614 16.5029 23.6146 16.961C23.1236 17.463 22.3962 17.2082 21.7603 16.7502C21.803 16.1419 22.4968 15.7355 23.1037 15.6566Z" fill="black" />
                            <path d="M22.2208 18.1443C22.1065 18.1398 21.9921 18.1367 21.8747 18.1367C21.8213 18.1367 21.7679 18.1398 21.7145 18.1413C18.6068 18.2217 16.1227 20.2465 16.1333 22.7218C16.144 25.2411 27.6663 25.1941 27.6556 22.6748C27.6465 20.2465 25.2432 18.2732 22.2208 18.1443Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                        </svg>
                    </Tab>
                )
            case 5: // hands
                return (
                    <Tab>
                        <svg width="41" height="27" viewBox="0 0 41 27" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0)">
                                <path d="M6.22313 1.26308C5.17172 1.77636 4.9401 3.99435 5.06505 5.01001C5.08791 5.20133 5.12144 5.41908 5.16258 5.65084C4.5622 5.70527 3.96335 5.89503 3.45289 6.16567C1.93214 6.97447 1.13977 8.77561 1.20987 10.4648C1.2373 11.1227 1.43386 11.7775 1.75691 12.353C0.967585 13.0203 0.449497 13.9177 0.167595 14.9552C-0.22859 16.4079 0.0898822 17.9477 0.982823 18.8888C0.693303 19.5342 0.568352 20.2559 0.649113 20.9248C0.781683 22.0182 1.70662 22.1348 2.5508 22.3557C2.58128 22.337 2.61023 22.3168 2.64223 22.2982C2.83118 22.1893 3.02318 22.0991 3.2167 22.0213C2.34661 21.6605 1.27844 21.872 1.12606 20.6246C1.06816 20.1564 1.16263 19.6711 1.36377 19.2232C1.95043 19.6571 2.71232 19.8764 3.62964 19.752C4.44182 19.6431 5.36981 18.7892 5.1382 17.8731C4.83344 16.6677 3.48031 16.747 2.57975 17.1716C2.01595 17.4376 1.55424 17.8933 1.22206 18.4377C0.967585 18.1391 0.774064 17.7766 0.650637 17.3785C0.152358 15.7686 0.818254 13.8773 2.04338 12.7947C2.55537 13.4822 3.27308 13.9971 4.11878 14.1604C5.53743 14.4341 6.93017 13.1058 5.70809 11.7511C4.75573 10.6965 3.34317 11.3187 2.32223 11.9424C2.2689 11.975 2.22014 12.0124 2.16833 12.0466C1.33787 10.5394 1.71119 8.54697 2.85556 7.28866C3.48641 6.59496 4.36411 6.2481 5.26772 6.15478C5.49781 7.16734 5.90619 8.29655 6.59037 8.77872C7.74083 9.58752 8.30463 7.6604 7.78807 6.82204C7.29131 6.01635 6.50046 5.67883 5.66238 5.64306C5.59686 5.26821 5.56181 4.93069 5.56333 4.69427C5.56638 3.98035 5.68981 3.26487 5.90923 2.58827C6.52332 0.690699 8.12787 2.26475 8.16444 3.67238L8.45396 2.63027C8.08825 1.6146 7.28064 0.746693 6.22313 1.26308ZM3.76069 17.3894C4.55001 17.3489 4.80753 18.0582 4.47078 18.6663C4.14621 19.2543 3.4026 19.2869 2.82966 19.2527C2.35423 19.2247 1.93824 19.0598 1.59691 18.7985C2.09367 18.0208 2.90889 17.4329 3.76069 17.3894ZM5.61819 12.9892C5.68219 13.8197 4.46163 13.6953 4.02583 13.6113C3.43155 13.4962 3.00946 13.1214 2.6148 12.6796C2.55537 12.6143 2.50356 12.5443 2.45023 12.4743C3.48336 11.7728 5.46581 11.0076 5.61819 12.9892ZM6.75189 6.53896C7.05055 6.7225 7.27455 6.97447 7.4574 7.27155C7.51988 7.37421 7.55645 8.68073 6.94998 8.40076C6.39532 8.14412 5.98695 7.10823 5.76143 6.147C6.11799 6.189 6.43647 6.34609 6.75189 6.53896Z" fill="black" />
                                <path d="M14.866 1.72553C14.5034 1.1127 13.9228 0.630534 13.1944 0.419001L12.14 0.112589C10.6131 -0.330697 9.0223 0.57454 8.58954 2.13304L8.4524 2.6261L8.16288 3.66821L8.00593 4.23282C7.57165 5.79132 8.4585 7.41514 9.98533 7.85687L11.0398 8.16329C11.8063 8.38571 14.1133 8.2675 14.7578 7.89887L14.802 1.92617C14.8188 1.85774 14.8417 1.79085 14.866 1.72553Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                                <path d="M2.55085 22.355C0.874686 23.3753 0.138696 25.29 0.90821 26.6789C1.69144 28.0943 7.9984 24.4547 7.21517 23.0393C6.51575 21.7779 4.81368 21.3797 3.21827 22.0205C3.02475 22.0983 2.83276 22.1885 2.64381 22.2974C2.61028 22.3145 2.58133 22.3347 2.55085 22.355Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                                <path d="M36.1035 5.59843C36.2194 4.64187 36.1569 3.66353 35.9649 2.85473C35.7653 2.01637 35.2777 1.00848 34.2918 1.12669C33.5512 1.2169 33.0468 1.84684 32.7893 2.57476L33.0971 3.68219C33.1428 2.47055 34.3923 0.7254 35.2213 2.27612C35.5976 2.98071 35.6693 3.90462 35.6936 4.68853C35.7013 4.94361 35.6738 5.25936 35.6144 5.59843C35.4453 5.61088 35.2761 5.63576 35.1055 5.6762C34.2826 5.86907 33.0042 6.80075 33.187 7.8102C33.3104 8.4899 34.0281 9.37803 34.7199 8.73254C35.4102 8.08706 35.8216 7.13671 36.0182 6.12416C36.9112 6.18948 37.7751 6.66854 38.4014 7.28448C39.6524 8.5179 39.8368 10.4792 39.0734 11.9926C37.8955 11.1729 36.1934 10.6643 35.3599 12.0455C34.3222 13.7673 36.3138 14.3988 37.5801 14.052C38.2765 13.8622 38.8266 13.3894 39.2304 12.7906C40.4982 13.8653 41.001 15.7645 40.6048 17.3743C40.4981 17.8067 40.2909 18.1722 40.0136 18.4677C39.2045 17.2934 37.6167 16.1284 36.5134 17.1845C35.3554 18.2935 36.7237 19.628 37.8833 19.7851C38.6422 19.8862 39.3218 19.6763 39.8688 19.2734C40.0121 19.614 40.1035 19.9609 40.1294 20.2751C40.2604 21.8149 39.0033 21.6189 38.0357 22.0187C38.2292 22.0964 38.4212 22.1867 38.6102 22.2955C38.6498 22.3189 38.6864 22.3438 38.726 22.3686C39.2243 22.2675 39.7606 22.2022 40.1157 21.8569C40.7785 21.2114 40.7176 20.2098 40.4722 19.3761C40.4296 19.2299 40.3625 19.0728 40.2787 18.9095C40.7374 18.4242 41.0574 17.7849 41.1884 17.0943C41.4947 15.4783 40.876 13.6616 39.7286 12.5339C39.6585 12.4639 39.5824 12.3955 39.5016 12.3255C39.8719 11.5945 40.0578 10.7499 40.0502 9.99863C40.0288 7.84908 38.217 5.74464 36.1035 5.59843ZM34.3055 8.39658C34.0464 8.39813 33.8727 8.27837 33.7843 8.03573C33.4735 7.54423 33.8925 7.08227 34.182 6.78831C34.5142 6.45079 35.0369 6.19104 35.5016 6.13504C35.27 7.05272 34.8479 8.01551 34.3055 8.39658ZM38.8372 19.1785C38.2308 19.3543 37.513 19.3107 37.0011 18.9126C36.2788 18.3511 36.643 17.4536 37.4932 17.3867C38.3831 17.3167 39.1542 17.984 39.6311 18.799C39.3949 18.9639 39.1298 19.093 38.8372 19.1785ZM35.9634 13.5278C35.6357 13.2494 35.5504 12.9243 35.7089 12.5495C35.9055 11.7267 36.579 11.6256 37.2296 11.7407C37.7889 11.8402 38.3146 12.1544 38.7915 12.4655C38.7427 12.537 38.694 12.607 38.6407 12.6755C38.0266 13.4516 36.9157 13.9618 35.9634 13.5278Z" fill="black" />
                                <path d="M32.6675 2.13304C32.2332 0.57454 30.6439 -0.330697 29.1171 0.112589L28.0626 0.419001C27.447 0.597871 26.9365 0.971164 26.5739 1.45178C26.6485 1.5871 26.7064 1.73175 26.7476 1.88573L26.8466 8.06529C27.415 8.29705 29.5833 8.34838 30.2188 8.16484L31.2732 7.85843C32.8 7.41514 33.6869 5.79287 33.2526 4.23437L33.1002 3.68376L32.7924 2.57633L32.6675 2.13304Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                                <path d="M38.0388 22.0166C36.4434 21.3758 34.7398 21.774 34.0403 23.0354C33.2571 24.4508 39.5641 28.0889 40.3473 26.675C41.1122 25.2923 40.3869 23.39 38.7275 22.3666C38.6894 22.3433 38.6513 22.3168 38.6117 22.2935C38.4243 22.1846 38.2323 22.0944 38.0388 22.0166Z" fill={this.state.tabIndex == index ? "#6A6A6D" : "#6AC3DB"} />
                            </g>
                            <defs>
                                <clipPath id="clip0">
                                    <rect width="41" height="27" fill="white" />
                                </clipPath>
                            </defs>
                        </svg>
                    </Tab>
                )
        }
    }
    renderAvatarBody = () => {

        return (
            <div>
                <div class="colorPaletteBtn">
                    {
                        this.state.skinColors.map((item, index) => {

                            return (<AvatarSkinColorBtn
                                color={item}
                                selected={this.state.selectedSkinColorIndex == index}
                                onColorSelected={() => {
                                    this.setState({
                                        selectedSkinColorIndex: index,

                                    });
                                }}
                            />)
                        })

                    }
                </div>
                <div class="buttonList">
                    {this.state.bodyMaleItems.map((item, index) => {
                        return (
                            <R_body
                                type="button"
                                x={-5}
                                y={-65}
                                z={0.7}
                                index={index}
                                targetId={item}
                                activeGender={this.state.activeGender}
                                selected={item == this.state.selectedBodyIndex}
                                activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]}
                                activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]}
                                activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]}
                                OnItemSelected={() => {
                                    this.setState({
                                        selectedBodyIndex: item
                                    });
                                }}
                            />
                        );
                    })
                    }
                </div>
            </div>
        )
    }
    renderAvatarEyes = () => {

        return (
            <div>
                <div class="buttonList">
                    {
                        this.state.eyeItems.map((item, index) => {
                            return (
                                <R_eyes
                                    type="button"
                                    x={-42}
                                    y={-20}
                                    z={1.5}
                                    index={index}
                                    targetId={item}

                                    // x={20}
                                    // y={-45}
                                    activeGender={this.state.activeGender}
                                    selected={item == this.state.selectedEyeIndex}
                                    activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]}
                                    activeEyeColor={this.state.eyeColors[this.state.selectedEyeColor]}
                                    OnItemSelected={() => {
                                        this.setState({
                                            selectedEyeIndex: item
                                        });
                                    }}
                                />
                            );
                        })
                    }
                </div>
            </div>
        )
    }
    renderAvatarMouth = () => {

        return (
            <div>
                <div class="buttonList">
                    {
                        this.state.mouthItems.map((item, index) => {
                            return (
                                <R_mouth
                                    type="button"
                                    x={-42}
                                    y={-30}
                                    z={1.5}
                                    index={index}
                                    targetId={item}

                                    // x={20}
                                    // y={-45}
                                    activeGender={this.state.activeGender}
                                    selected={item == this.state.selectedMouthIndex}
                                    activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]}
                                    OnItemSelected={() => {
                                        this.setState({
                                            selectedMouthIndex: item
                                        });
                                    }}
                                />
                            );
                        })
                    }
                </div>
            </div>
        )
    }
    renderAvatarHead = () => {

        return (
            <div>
                <div class="buttonList">
                    {this.state.headItems.map((item, index) => {
                        return (
                            <R_head
                                type="button"
                                x={-5}
                                y={15}
                                z={0.7}
                                index={index}
                                targetId={item}
                                activeGender={this.state.activeGender}
                                selected={item == this.state.selectedHeadAccessoryIndex}
                                activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]}
                                activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]}
                                activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]}
                                OnItemSelected={() => {
                                    this.setState({
                                        selectedHeadAccessoryIndex: item,
                                    });
                                }}
                            />
                        );
                    })}
                </div>
            </div>
        )
    }
    renderAvatarBottom = () => {

        return (
            <div>
                <div class="buttonList">
                    {this.state.pantsItems.map((item, index) => {
                        return (
                            <R_legs
                                type="button"
                                x={-25}
                                y={-125}
                                z={1}
                                index={index}
                                targetId={item}
                                activeGender={this.state.activeGender}
                                selected={item == this.state.selectedBottomIndex}
                                activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]}
                                activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]}
                                activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]}
                                OnItemSelected={() => {
                                    this.setState({
                                        selectedBottomIndex: item,
                                    });
                                }}
                            />
                        );
                    })}
                </div>
            </div>
        )
    }
    renderAvatarMiddle = () => {

        return (
            <div>
                <div class="buttonList">
                    {this.state.shirtItems.map((item, index) => {
                        return (
                            <R_hands
                                type="button"
                                x={5}
                                y={-40}
                                z={0.6}
                                index={index}
                                targetId={item}
                                activeGender={this.state.activeGender}
                                selected={item == this.state.selectedShirtIndex}
                                activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]}
                                activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]}
                                activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]}
                                OnItemSelected={() => {
                                    this.setState({
                                        selectedShirtIndex: item,
                                    });
                                }}
                            />
                        );
                    })}
                </div>
            </div>
        )
    }
    saveAvatar = async () => {
        let finalAvatar = await window.btoa(new XMLSerializer().serializeToString(document.getElementById("final-avatar")))
        let finalAvatarHead = await window.btoa(new XMLSerializer().serializeToString(document.getElementById("final-avatar-head")))
        this.setState({
            finalImage: 'data:image/svg+xml;base64,' + finalAvatar,
            finalImageHead: 'data:image/svg+xml;base64,' + finalAvatarHead
        })
        setTimeout(() => {
            var canvas = document.createElement('canvas');
            canvas.width = 400; // or 'width' if you want a special/scaled size
            canvas.height = 554.31; // or 'height' if you want a special/scaled size
            canvas.getContext('2d').drawImage(document.getElementById('final-image'), 0, 0);
            let finalav = canvas.toDataURL('image/png')

            var canvasHead = document.createElement('canvas');
            canvasHead.width = 100; // or 'width' if you want a special/scaled size
            canvasHead.height = 100; // or 'height' if you want a special/scaled size
            canvasHead.getContext('2d').drawImage(document.getElementById('final-image-head'), 0, 0);
            let finalavHead = canvasHead.toDataURL('image/png')
            this.uploadAvatar(finalav, finalavHead)
        }, 250);

    }
    uploadAvatar = async (fullScreenShot, headScreenShot) => {

        if (this.state.saving == false) {


            let avatar = {

                selectedSkinColorIndex: this.state.selectedSkinColorIndex,
                selectedEyeIndex: this.state.selectedEyeIndex,
                selectedNoseIndex: this.state.selectedNoseIndex,
                selectedMouthIndex: this.state.selectedMouthIndex,
                selectedHairIndex: this.state.selectedHairIndex,
                selectedEyeBrowsIndex: this.state.selectedEyeBrowsIndex,
                FrontFaceAccessoryActive: this.state.FrontFaceAccessoryActive,
                backHairActive: this.state.backHairActive,
                activeGender: this.state.activeGender,
                selectedEyeColor: this.state.selectedEyeColor,
                selectedHairColor: this.state.selectedHairColor,
                selectedEyeBrowsColor: this.state.selectedEyeBrowsColor,
                selectedBottomIndex: this.state.selectedBottomIndex,
                selectedShirtIndex: this.state.selectedShirtIndex,
                selectedFaceAccessoryIndex: this.state.selectedFaceAccessoryIndex,
                selectedHeadAccessoryIndex: this.state.selectedHeadAccessoryIndex,
                selectedBodyIndex: this.state.selectedBodyIndex,
                selectedBackgroundIndex: this.state.selectedBackgroundIndex,
                avatarType: 'robot'
            }
            this.setState({
                saving: true
            })
            let saveAvatar = await saveAvatarData(fullScreenShot, headScreenShot, avatar, this.props.loggedInUser.userData._id)
            this.setState({
                saving: false
            })
            const avatarLinkBody = saveAvatar.avatarLinkBody;
            // console.log('this.props.',this.props)
            console.log(saveAvatar)
            router.push("/AvatarScreens/AvatarConfirmation")
            this.props.dispatch({ type: "CHANGE_AVATAR", avatarLinkBody })



            // this.props.navigation.popToTop()
        }
    }
    render() {
        return (
            <div>
                <div className="save" onClick={this.saveAvatar}> Save</div>
                <img src={this.state.finalImage} id="final-image" />
                <img src={this.state.finalImageHead} id="final-image-head" />
                <ScreenshotRobotAvatar {...this.state} />

                <div>
                    <div className="finalAvatar" >
                        <svg id="final-avatar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 156.83 217.33" height="100%" width="100%">

                            <g transform="translate(0, 0)">
                                <R_background targetId={this.state.selectedBackgroundIndex} />
                                <R_head targetId={this.state.selectedHeadAccessoryIndex} activeGender={this.state.activeGender} activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]} activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]} activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]} />
                                <R_legs targetId={this.state.selectedBottomIndex} activeGender={this.state.activeGender} activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]} activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]} activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]} />
                                <R_hands targetId={this.state.selectedShirtIndex} activeGender={this.state.activeGender} activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]} activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]} activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]} />
                                <R_body activeSkinColor={this.state.skinColors[this.state.selectedSkinColorIndex]} activeBodyPartsSkinColor={this.state.bodyPartsSkinColor[this.state.selectedSkinColorIndex]} activeGender={this.state.activeGender} targetId={this.state.selectedBodyIndex} activeHeadSkinColor={this.state.headSkinColor[this.state.selectedSkinColorIndex]} />
                                <R_mouth targetId={this.state.selectedMouthIndex} />
                                <R_eyes targetId={this.state.selectedEyeIndex} activeEyeColor={this.state.eyeColors[this.state.selectedEyeColor]} />
                            </g>

                        </svg>
                    </div>
                </div>


                <Tabs selectedTabClassName="active-tab" selectedIndex={this.state.tabIndex} onSelect={this.handleSelect} className={'rtlDir'} >
                    <div className={`flex-wrapper-row  sticky-top `}>

                        <TabList activeTabClassName="ActiveTab" className="avatar-tabs sticky-top">

                            {
                                this.state.tabIcons.map((item, index) => {
                                    return this.renderTabIcon(item)
                                })
                            }

                        </TabList>
                    </div>
                    <TabPanel>

                        {
                            this.renderAvatarBody()
                        }

                    </TabPanel>
                    <TabPanel>
                        {
                            this.renderAvatarEyes()
                        }
                    </TabPanel>
                    <TabPanel>
                        {
                            this.renderAvatarMouth()
                        }
                    </TabPanel>
                    <TabPanel>
                        {
                            this.renderAvatarHead()
                        }
                    </TabPanel>
                    <TabPanel>
                        {
                            this.renderAvatarBottom()
                        }
                    </TabPanel>
                    <TabPanel>
                        {
                            this.renderAvatarMiddle()
                        }
                    </TabPanel>
                </Tabs>
            </div>
        );
    }
}
const mapStateToProps = (state) => ({
    loggedInUser: state.mainReducer.loggedInUser,
})

RobotAvatar.layout = "In";

export default connect(mapStateToProps)(RobotAvatar);